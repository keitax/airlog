// Code generated by MockGen. DO NOT EDIT.
// Source: view.go

// Package application is a generated GoMock package.
package application

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/keitam913/airlog/domain"
	reflect "reflect"
)

// MockView is a mock of ViewRepository interface
type MockView struct {
	ctrl     *gomock.Controller
	recorder *MockViewMockRecorder
}

// MockViewMockRecorder is the mock recorder for MockView
type MockViewMockRecorder struct {
	mock *MockView
}

// NewMockView creates a new mock instance
func NewMockView(ctrl *gomock.Controller) *MockView {
	mock := &MockView{ctrl: ctrl}
	mock.recorder = &MockViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockView) EXPECT() *MockViewMockRecorder {
	return m.recorder
}

// RenderList mocks base method
func (m *MockView) RenderList(posts []*domain.Post) (string, error) {
	ret := m.ctrl.Call(m, "RenderList", posts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderList indicates an expected call of RenderList
func (mr *MockViewMockRecorder) RenderList(posts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderList", reflect.TypeOf((*MockView)(nil).RenderList), posts)
}

// RenderPost mocks base method
func (m *MockView) RenderPost(post *domain.Post) (string, error) {
	ret := m.ctrl.Call(m, "RenderPost", post)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenderPost indicates an expected call of RenderPost
func (mr *MockViewMockRecorder) RenderPost(post interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderPost", reflect.TypeOf((*MockView)(nil).RenderPost), post)
}
