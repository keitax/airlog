// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostService is a mock of PostService interface
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// GetByHTMLFilename mocks base method
func (m *MockPostService) GetByHTMLFilename(filename string) (*Post, error) {
	ret := m.ctrl.Call(m, "GetByHTMLFilename", filename)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHTMLFilename indicates an expected call of GetByHTMLFilename
func (mr *MockPostServiceMockRecorder) GetByHTMLFilename(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHTMLFilename", reflect.TypeOf((*MockPostService)(nil).GetByHTMLFilename), filename)
}

// Recent mocks base method
func (m *MockPostService) Recent() ([]*Post, error) {
	ret := m.ctrl.Call(m, "Recent")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recent indicates an expected call of Recent
func (mr *MockPostServiceMockRecorder) Recent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recent", reflect.TypeOf((*MockPostService)(nil).Recent))
}
