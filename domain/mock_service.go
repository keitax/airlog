// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostService is a mock of PostService interface
type MockPostService struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceMockRecorder
}

// MockPostServiceMockRecorder is the mock recorder for MockPostService
type MockPostServiceMockRecorder struct {
	mock *MockPostService
}

// NewMockPostService creates a new mock instance
func NewMockPostService(ctrl *gomock.Controller) *MockPostService {
	mock := &MockPostService{ctrl: ctrl}
	mock.recorder = &MockPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostService) EXPECT() *MockPostServiceMockRecorder {
	return m.recorder
}

// ConvertToPost mocks base method
func (m *MockPostService) ConvertToPost(filename, content string) *Post {
	ret := m.ctrl.Call(m, "ConvertToPost", filename, content)
	ret0, _ := ret[0].(*Post)
	return ret0
}

// ConvertToPost indicates an expected call of ConvertToPost
func (mr *MockPostServiceMockRecorder) ConvertToPost(filename, content interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToPost", reflect.TypeOf((*MockPostService)(nil).ConvertToPost), filename, content)
}
