// Code generated by MockGen. DO NOT EDIT.
// Source: post_repository.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostRepository is a mock of PostRepository interface
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Filename mocks base method
func (m *MockPostRepository) Filename(filename string) (*Post, error) {
	ret := m.ctrl.Call(m, "Filename", filename)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Filename indicates an expected call of Filename
func (mr *MockPostRepositoryMockRecorder) Filename(filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filename", reflect.TypeOf((*MockPostRepository)(nil).Filename), filename)
}

// All mocks base method
func (m *MockPostRepository) All() ([]*Post, error) {
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockPostRepositoryMockRecorder) All() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPostRepository)(nil).All))
}

// Put mocks base method
func (m *MockPostRepository) Put(post *Post) error {
	ret := m.ctrl.Call(m, "Put", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put
func (mr *MockPostRepositoryMockRecorder) Put(post interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPostRepository)(nil).Put), post)
}
