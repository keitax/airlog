// Code generated by MockGen. DO NOT EDIT.
// Source: post_file_repository.go

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPostFileRepository is a mock of PostFileRepository interface
type MockPostFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostFileRepositoryMockRecorder
}

// MockPostFileRepositoryMockRecorder is the mock recorder for MockPostFileRepository
type MockPostFileRepositoryMockRecorder struct {
	mock *MockPostFileRepository
}

// NewMockPostFileRepository creates a new mock instance
func NewMockPostFileRepository(ctrl *gomock.Controller) *MockPostFileRepository {
	mock := &MockPostFileRepository{ctrl: ctrl}
	mock.recorder = &MockPostFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPostFileRepository) EXPECT() *MockPostFileRepositoryMockRecorder {
	return m.recorder
}

// ChangedFiles mocks base method
func (m *MockPostFileRepository) ChangedFiles(event *PushEvent) ([]*PostFile, error) {
	ret := m.ctrl.Call(m, "ChangedFiles", event)
	ret0, _ := ret[0].([]*PostFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangedFiles indicates an expected call of ChangedFiles
func (mr *MockPostFileRepositoryMockRecorder) ChangedFiles(event interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangedFiles", reflect.TypeOf((*MockPostFileRepository)(nil).ChangedFiles), event)
}
